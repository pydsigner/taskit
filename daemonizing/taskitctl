#!/usr/bin/env python

"""
taskitctl -- send commands and introspective messages to a TaskIt backend.

  taskitctl {-h|--help|help}
Show help and exit.

  taskitctl command host ports
Send `command` to the the TaskIt backends running on the `ports` of `host`, 
where command is one of "stop", "kill", or "status", and ports is one of 
"number", "number,number2,number3...", or "number-number2".
"""

import sys
import socket

from taskit.frontend import FrontEnd
from taskit.common import STOP, KILL, STATUS

from port_expander import get_ports


COMMANDS = {'stop': (STOP, 'stopped'), 'kill': (KILL, 'terminated'), 
            'status': (STATUS, 'up, %s jobs running')}


def send_msg(frontend, backend, signal, note):
    """
    frontend -- The FrontEnd to be used for the connection.
    backend  -- The (host, port) that the BackEnd to be reached is running on.
    signal   -- The signal to be sent.
    note     -- What should be returned if the transmission is successful. If 
                this string contains '%s', the result of the transmission will 
                be %ed into it.
    """
    try:
        # Try to get the response to the signal
        msg = frontend.send_signal(backend, signal)
    except socket.error:
        # Could not make a connection, there is no TaskIt backend running on 
        # that host and port
        note = 'down'
    else:
        # If we have a slot for the response, fill it in
        if '%s' in note:
            note %= msg
    # Whatever we have, whatever it is, return.
    return note


def main():
    if len(sys.argv) != 4 or sys.argv[1] in ('-h' '--help', 'help'):
        print(__doc__)
        return
    
    command, host, ports = sys.argv[1:]
    signal, note = COMMANDS[command]
    frontend = FrontEnd()
    
    for port in get_ports(ports):
        backend = (host, port)
        frontend.add_backends(backend)
        res = send_msg(frontend, backend, signal, note)
        print('%s:%s --> %s' %(host, port, res))


if __name__ == '__main__':
    main()
